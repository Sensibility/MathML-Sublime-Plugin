%YAML 1.2
---
name: MathML
file_extensions:
  - mathml
  - mathm
  - mhtml
first_line_match: (?i)<(!DOCTYPE\s*)?math
scope: text.mathml.basic
contexts:
  main:
    # I feel the need for an explanation; it may look at first glance that I'm pointlessly giving every individual
    # attribute its own capture group, slowing down syntax highlighting for no reason. The reason I'm doing this is
    # so I can eventually enforce a set of allowable values for attributes, which are pretty varied (except for
    # numerical values). I just need to figure out how to do that.
    - match: (<\?)(xml)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.xml.mathml
      push:
        - meta_scope: meta.tag.preprocessor.xml.mathml
        - match: '\?>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: tag-generic-attribute
        - include: string-double-quoted
        - include: string-single-quoted
    - match: <!--
      scope: punctuation.definition.comment.mathml
      push:
        - meta_scope: comment.block.mathml
        - match: '--\s*>'
          pop: true
        - match: "--"
          scope: invalid.illegal.bad-comments.mathml
    - match: <!
      scope: punctuation.definition.tag.mathml
      push:
        - meta_scope: meta.tag.sgml.mathml
        - match: ">"
          scope: punctuation.definition.tag.mathml
          pop: true
        - match: (?i:DOCTYPE)
          scope: entity.name.tag.doctype.mathml
          push:
            - meta_scope: meta.tag.sgml.doctype.mathml
            - match: (?=>)
              pop: true
            - match: '"[^">]*"'
              scope: string.quoted.double.doctype.identifiers-and-DTDs.mathml
        - match: (\s*)(?!--|>)\S(\s*)
          scope: invalid.illegal.bad-comments.mathml

    # Matches the 'math' tag, which has some unique attributes
    - match: (</?)((?i:math)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.structure.math.mathml
      push:
        - meta_scope: meta.tag.structure.math.mathml
        - match: '>'
          scope: punctuation.definition.tag-stuff.end.mathml
          pop: true
        - include: math-tags
        - include: tag-stuff

    - match: (</?)((?i:semantics|annotation(-xml)?)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.structure.any.mathml
      push:
        - meta_scope: meta.tag.structure.any.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: tag-stuff
    - match: (</?)((?i:maction|maligngroup|malignmark|menclose|merror|mfenced|mfrac|mlabeledtr|mlongdiv|mmultiscripts|mover|mpadded|mphantom|mroot|mrow|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstyle|msub|msup|msubsup|mtable|mtd|mtext|mtr|munder|munderover)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.any.mathml
      push:
        - meta_scope: meta.tag.block.any.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: tag-stuff

    #captures the math operator tag
    #Unfortunately, the highlighting theme doesn't appear to support operators in markup languages
    - match: (</?)((?i:mo)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.mo.mathml
      push:
        - meta_scope: meta.tag.block.mo.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          set:
            - meta_scope: keyword.operator.arithmetic.mathml
            - include: entities
            - match: '(</)((?i:mo))(>)'
              captures:
                1: punctuation.definition.tag.begin.mathml
                2: entity.name.tag.block.mo.mathml
                3: punctuation.definition.tag.end.mathml
              pop: true
          pop: true
        - include: mo-tags
        - include: tag-stuff

    #captures glyphs, which are a special token tag
    - match: (</?)((?i:mglyph)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.mglyph.mathml
      push:
        - meta_scope: meta.tag.block.glyph.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: token-tags
        - include: mglyph-tags
        - include: tag-stuff

    #captures token tags
    - match: (</?)((?i:mi|mn|mtext)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.token.mathml
      push:
        - meta_scope: meta.tag.block.token.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: token-tags
        - include: tag-stuff

    #captures the math space tag (which is technically a token, but supports its own attributes)
    - match: (</?)((?i:mspace)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.mspace.mathml
      push:
        - meta_scope: meta.tag.block.mspace.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          pop: true
        - include: token-tags
        - include: mspace-tags
        - include: tag-stuff

    #captures the string literal tag (which is technically a token, but supports its own attributes)
    #I'm actually not 100% right now on how to not highlight the closing tag as a string, but this is pretty neat so far
    - match: (<)((?i:ms)\b)
      captures:
        1: punctuation.definition.tag.begin.mathml
        2: entity.name.tag.block.ms.mathml
      push:
        #- meta_scope: meta.tag.block.ms.mathml
        - match: '>'
          scope: punctuation.definition.tag.end.mathml
          set:
            - meta_scope: string.double.quoted.mathml
            - include: entities
            - match: '(</)((?i:ms))(>)'
              captures:
                1: punctuation.definition.tag.begin.mathml
                2: entity.name.tag.block.ms.mathml
                3: punctuation.definition.tag.end.mathml
              pop: true
        - include: token-tags
        - include: ms-tags
        - include: tag-stuff



    - include: entities
    - match: <.*>
      scope: invalid.illegal.incomplete.mathml
  entities-common:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.mathl
      captures:
        1: punctuation.definition.entity.mathml
        3: punctuation.definition.entity.mathml
  attribute-entities:
    - include: entities-common
  entities:
    - include: entities-common
    - match: "&"
      scope: invalid.illegal.bad-ampersand.mathml
  string-double-quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.mathml
      push:
        - meta_scope: string.quoted.double.mathml
        - match: '"'
          scope: punctuation.definition.string.end.mathml
          pop: true
        - include: entities
  string-single-quoted:
    - match: "'"
      scope: punctuation.definition.string.begin.mathml
      push:
        - meta_scope: string.quoted.single.mathml
        - match: "'"
          scope: punctuation.definition.string.end.mathml
          pop: true
        - include: entities

  #Nothing uses this yet, it's just here as a template. Possible use in the future with external xml namespaces
  tag-generic-attribute:
    - match: '(?:^|\s+)(([a-zA-Z0-9:\-_.]+)\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.mathml
        2: entity.other.attribute-name.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.mathml string.unquoted.mathml
        - match: ''
          pop: true
    - match: '\s+([a-zA-Z0-9:\-_.]+)'
      captures:
        1: entity.other.attribute-name.mathml

  #matches attributes which are valid only for the `mo` tag, and includes other, non-global attributes that are valid for `mo` and one or more other tags
  mo-tags:

    # Non-specifc, non-global attributes
    - include: tag-accent-attribute
    - include: tag-lspace-attribute
    - include: linebreaking-tags

    #the `form` attribute, tells whether an operator is prefix, infix, postfix
    - match: '(?:^|\s+)\b((form)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.form.mathml
        2: entity.other.attribute-name.form.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.form.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.form.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.form.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `fence` attribute, tells whether an operator used to group terms
    - match: '(?:^|\s+)\b((fence)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.fence.mathml
        2: entity.other.attribute-name.fence.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.fence.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.fence.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.fence.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `moveablelimits` attribute, tells whether under- and overscripts attached to this operator should move to sub- and superscript positions when the displaystyle normally wouldn't allow over- and underscripts
    - match: '(?:^|\s+)\b((moveablelimits)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.moveablelimits.mathml
        2: entity.other.attribute-name.moveablelimits.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.moveablelimits.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.moveablelimits.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.moveablelimits.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `largeop` attribute, tells whetherthe operator ought to be drawn larger than normal if displaystyle is set to true
    - match: '(?:^|\s+)\b((largeop)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.largeop.mathml
        2: entity.other.attribute-name.largeop.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.largeop.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.largeop.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.largeop.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `separator` attribute, tells whetheroperator separates values and/or identifiers
    - match: '(?:^|\s+)\b((separator)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.separator.mathml
        2: entity.other.attribute-name.separator.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.separator.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.separator.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.separator.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `rspace` attribute, specifies a length of space to be placed after the operator
    - match: '(?:^|\s+)\b((rspace)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.rspace.mathml
        2: entity.other.attribute-name.rspace.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.rspace.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.rspace.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.rspace.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `stretchy` attribute, tells whether an operator should stretch to match the size of adjacent material
    - match: '(?:^|\s+)\b((stretchy)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.stretchy.mathml
        2: entity.other.attribute-name.stretchy.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.stretchy.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.stretchy.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.stretchy.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the `symmetric` attribute, for operators with the 'stretchy' attribute, tells whether they should be kept symmetric about the "math axis" (centered fraction line)
    - match: '(?:^|\s+)\b((symmetric)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.symmetric.mathml
        2: entity.other.attribute-name.symmetric.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.symmetric.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.symmetric.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.symmetric.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #theoperator's maximum size
    - match: '(?:^|\s+)\b((maxsize)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.maxsize.mathml
        2: entity.other.attribute-name.maxsize.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.maxsize.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.maxsize.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.maxsize.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the operator's minimum size
    - match: '(?:^|\s+)\b((minsize)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.minsize.mathml
        2: entity.other.attribute-name.minsize.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.minsize.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.minsize.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.minsize.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #matches attributes which are valid only for the `mspace` tag, and includes the `linebreak` attribute
  mspace-tags:

    - include: tag-linebreak-attribute
    - include: indent-tags #This is ridiculous to me; the spec says that you should linebreak only on operators, so indentation shouldn't be specified on a space. But they let you do it anyway, because why not?

    #specifies the width of the space
    - match: '(?:^|\s+)\b((width)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.width.mathml
        2: entity.other.attribute-name.width.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.width.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.width.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.width.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #specifies the height of the space (above baseline)
    - match: '(?:^|\s+)\b((height)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.height.mathml
        2: entity.other.attribute-name.height.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.height.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.height.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.height.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #specifies the depth of the space (below baseline)
    - match: '(?:^|\s+)\b((depth)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.depth.mathml
        2: entity.other.attribute-name.depth.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.depth.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.depth.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.depth.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #matches attributes which are valid only for the `ms` tag
  ms-tags:

    #specifies starting quote (not necessarily "left quote" in e.g. right-to-left environment)
    - match: '(?:^|\s+)\b((lquote)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.lquote.mathml
        2: entity.other.attribute-name.lquote.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lquote.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lquote.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.lquote.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies ending quote (not necessarily "right quote" in e.g. right-to-left environment)
    - match: '(?:^|\s+)\b((rquote)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.rquote.mathml
        2: entity.other.attribute-name.rquote.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.rquote.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.rquote.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.rquote.mathml string.unquoted.mathml
        - match: ''
          pop: true  

  #matches attributes which are valid only for the `mglyph` tag
  mglyph-tags:
    #the glyph's width
    - match: '(?:^|\s+)\b((width)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.width.mathml
        2: entity.other.attribute-name.width.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.width.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.width.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the glyph's height
    - match: '(?:^|\s+)\b((height)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.height.mathml
        2: entity.other.attribute-name.height.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.height.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.height.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #A uri pointing to the glyph's image data
    - match: '(?:^|\s+)\b((src)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.src.mathml
        2: entity.other.attribute-name.src.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.src.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.src.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #the glyph's vertical alignment
    - match: '(?:^|\s+)\b((valign)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.valign.mathml
        2: entity.other.attribute-name.valign.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.valign.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.valign.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #text to display if the glyph source is unreachable, or it cannot otherwise render
    - match: '(?:^|\s+)\b((alt)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.alt.mathml
        2: entity.other.attribute-name.alt.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.alt.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.alt.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true


  #A bunch of attributes for tags that can determine line breaks (so far only `mo` and `mspace`)
  linebreaking-tags:

    - include: tag-linebreak-attribute

    - match: '(?:^|\s+)\b((linebreakmultchar)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.linebreakmultchar.mathml
        2: entity.other.attribute-name.linebreakmultchar.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreakmultchar.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreakmultchar.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.linebreakmultchar.mathml string.unquoted.mathml
        - match: ''
          pop: true

    - match: '(?:^|\s+)\b((linebreakstyle)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.linebreakstyle.mathml
        2: entity.other.attribute-name.linebreakstyle.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreakstyle.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreakstyle.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.linebreakstyle.mathml string.unquoted.mathml
        - match: ''
          pop: true

    - match: '(?:^|\s+)\b((lineleading)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.lineleading.mathml
        2: entity.other.attribute-name.lineleading.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lineleading.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lineleading.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.lineleading.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #These attributes are valid for any token tags (e.g. `mi`, `mo` etc.)
  token-tags:

    #Specifies the permissible size of the math element
    - match: '(?:^|\s+)\b((mathsize)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.mathsize.mathml
        2: entity.other.attribute-name.mathsize.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathsize.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathsize.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.mathsize.mathml string.unquoted.mathml
        - match: ''
          pop: true    

    #Specifies a font variant to be used
    - match: '(?:^|\s+)\b((mathvariant)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.mathvariant.mathml
        2: entity.other.attribute-name.mathvariant.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathvariant.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathvariant.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.mathvariant.mathml string.unquoted.mathml
        - match: ''
          pop: true    

    - include: tag-dir-attribute

  #These tags are common to all presentation elements
  presentation-style-tags:

    #changes the background color (or the special color 'transparent')
    - match: '(?:^|\s+)\b((mathbackground)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.mathbackground.mathml
        2: entity.other.attribute-name.mathbackground.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.mathbackground.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.mathbackground.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #changes text color
    - match: '(?:^|\s+)\b((mathcolor)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.mathcolor.mathml
        2: entity.other.attribute-name.mathcolor.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.mathcolor.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.string.begin.mathml
          set: 
            - meta_scope: meta.attribute-with-value.mathcolor.mathml string.quoted.double.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #These attributes are valid for any tags that support indentation
  indent-tags:

    # specifies the position of lines when linebreaking
    - match: '(?:^|\s+)\b((indentalign)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentalign.mathml
        2: entity.other.attribute-name.indentalign.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalign.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalign.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentalign.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies an id to align with for indentation
    - match: '(?:^|\s+)\b((indenttarget)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indenttarget.mathml
        2: entity.other.attribute-name.indenttarget.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indenttarget.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indenttarget.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indenttarget.mathml string.unquoted.mathml
        - match: ''
          pop: true

    #specifies an additional offset to apply to the calculated indent position
    - match: '(?:^|\s+)\b((indentshift)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentshift.mathml
        2: entity.other.attribute-name.indentshift.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshift.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshift.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentshift.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies the indentation style to use for the first line of a formula
    - match: '(?:^|\s+)\b((indentalignfirst)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentalignfirst.mathml
        2: entity.other.attribute-name.indentalignfirst.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalignfirst.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalignfirst.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentalignfirst.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies the offset to use for the first line of a formula
    - match: '(?:^|\s+)\b((indentshiftfirst)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentshiftfirst.mathml
        2: entity.other.attribute-name.indentshiftfirst.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshiftfirst.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshiftfirst.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentshiftfirst.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies the indentation style to use for the last line when a linebreak occurs
    - match: '(?:^|\s+)\b((indentalignlast)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentalignlast.mathml
        2: entity.other.attribute-name.indentalignlast.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalignlast.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentalignlast.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentalignlast.mathml string.unquoted.mathml
        - match: ''
          pop: true  

    #specifies the offset to use for the last line when a linebreak occurs
    - match: '(?:^|\s+)\b((indentshiftlast)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.indentshiftlast.mathml
        2: entity.other.attribute-name.indentshiftlast.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshiftlast.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.indentshiftlast.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.indentshiftlast.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #Specifies text direction
  tag-dir-attribute:
    - match: '(?:^|\s+)\b((dir)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.dir.mathml
        2: entity.other.attribute-name.dir.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.dir.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.dir.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.dir.mathml string.unquoted.mathml
        - match: ''
          pop: true    

  #Specifies whether a line break should/can occur/would look nice here
  tag-linebreak-attribute:
    - match: '(?:^|\s+)\b((linebreak)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.linebreak.mathml
        2: entity.other.attribute-name.linebreak.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreak.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.linebreak.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.linebreak.mathml string.unquoted.mathml
        - match: ''
          pop: true

  #Specifies the amount of space to place before an operator or `mpadded` element
  tag-lspace-attribute:
    - match: '(?:^|\s+)\b((lspace)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.lspace.mathml
        2: entity.other.attribute-name.lspace.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lspace.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.lspace.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.lspace.mathml string.unquoted.mathml
        - match: ''
          pop: true

  tag-id-attribute:
    - match: '(?:^|\s+)\b((id)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.id.mathml
        2: entity.other.attribute-name.id.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.id.mathml string.quoted.double.mathml
            - meta_content_scope: meta.toc-list.id.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.id.mathml string.quoted.single.mathml
            - meta_content_scope: meta.toc-list.id.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.id.mathml string.unquoted.mathml meta.toc-list.id.mathml
        - match: ''
          pop: true

  #matches the class attribute, which is provided for use with stylesheets
  tag-class-attribute:
    - match: '(?:^|\s+)\b((class)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.class.mathml
        2: entity.other.attribute-name.class.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.class.mathml string.quoted.double.mathml
            - meta_content_scope: meta.class-name.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.class.mathml string.quoted.single.mathml
            - meta_content_scope: meta.class-name.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.class.mathml string.unquoted.mathml meta.class-name.mathml
        - match: ''
          pop: true

  #matches attributes for marking accents on operators or variables
  tag-accent-attribute:
    - match: '(?:^|\s+)\b((accent)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.accent.mathml
        2: entity.other.attribute-name.accent.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match:  '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.accent.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.accent.mathml string.quoted.single.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: '(?:[^\s<>/''"]|/(?!>))+'
          scope: meta.attribute-with-value.accent.mathml string.unquoted.mathml
        - match: ''
          pop: true


  math-tags:
    - match: '(?:^|\s+)\b((display)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.display.mathml
        2: entity.other.attribute-name.display.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.mathml string.quoted.double.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.id.mathml string.quoted.single.mathml
            - meta_content_scope: meta.toc-list.id.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
    - match: '(?:^|\s+)\b((altimg)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.altimg.mathml
        2: entity.other.attribute-name.altimg.mathml
        3: punctuation.separator.key-value.mathml
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.altimg.mathml string.quoted.double.mathml
            - meta_content_scope: meta.toc-list.altimg.mathml
            - match: '"'
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - match: "'"
          scope: punctuation.definition.string.begin.mathml
          set:
            - meta_scope: meta.attribute-with-value.altimg.mathml string.quoted.single.mathml
            - meta_content_scope: meta.toc-list.altimg.mathml
            - match: "'"
              scope: punctuation.definition.string.end.mathml
              pop: true
            - include: attribute-entities
        - include: tag-stuff

  #global attributes
  tag-stuff:
    - include: tag-id-attribute
    - include: tag-class-attribute
    - include: presentation-style-tags
    #- include: tag-generic-attribute

